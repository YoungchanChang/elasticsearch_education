version: "3.0"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: node1\n"\
          "    dns:\n"\
          "      - node1\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: node2\n"\
          "    dns:\n"\
          "      - node2\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: node3\n"\
          "    dns:\n"\
          "      - node3\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: node4\n"\
          "    dns:\n"\
          "      - node4\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: node5\n"\
          "    dns:\n"\
          "      - node5\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://node1:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://node1:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting kibana_system2 password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://node5:9204/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/node1/node1.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - es-net

  node1:
    container_name: node1
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: always
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=node1
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=node1,node2,node3
      - discovery.seed_hosts=node2,node3
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/node1/node1.key
      - xpack.security.http.ssl.certificate=certs/node1/node1.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/node1/node1.key
      - xpack.security.transport.ssl.certificate=certs/node1/node1.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - network.host=0.0.0.0
      - reindex.remote.whitelist=localhost:9204
      - reindex.ssl.certificate_authorities=/usr/share/elasticsearch/config/certificates/ca/ca.crt
      - reindex.ssl.verification_mode=none
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-net

  node2:
    container_name: node2
    depends_on:
      - node1
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    restart: always
    environment:
      - node.name=node2
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=node1,node2,node3
      - discovery.seed_hosts=node1,node3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/node2/node2.key
      - xpack.security.http.ssl.certificate=certs/node2/node2.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/node2/node2.key
      - xpack.security.transport.ssl.certificate=certs/node2/node2.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-net

  node3:
    container_name: node3
    depends_on:
      - node2
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: always
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=node3
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=node1,node2,node3
      - discovery.seed_hosts=node1,node2
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/node3/node3.key
      - xpack.security.http.ssl.certificate=certs/node3/node3.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/node3/node3.key
      - xpack.security.transport.ssl.certificate=certs/node3/node3.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-net

  node4:
    container_name: node4
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - es-net
    depends_on:
      - node3
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata04:/usr/share/elasticsearch/data
      - './snapshots:/var/tmp/snapshots/'
    environment:
      - node.name=node4
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=node1,node2,node4
      - discovery.seed_hosts=node1,node2
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/node4/node4.key
      - xpack.security.http.ssl.certificate=certs/node4/node4.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/node4/node4.key
      - xpack.security.transport.ssl.certificate=certs/node4/node4.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1g
    healthcheck:
      interval: 20s
      retries: 10
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]

  node5:
    depends_on:
      setup:
        condition: service_healthy
    container_name: node5
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - es-net
    ports:
      - 9304:9304
      - 9204:9204
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata05:/usr/share/elasticsearch/data
      - './snapshots:/var/tmp/snapshots/'
    environment:
      - node.name=node5
      - cluster.name=${CLUSTER_NAME2}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - discovery.type=single-node
      - http.port= 9204
      - transport.port= 9304
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/node5/node5.key
      - xpack.security.http.ssl.certificate=certs/node5/node5.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/node5/node5.key
      - xpack.security.transport.ssl.certificate=certs/node5/node5.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1g
    healthcheck:
      interval: 20s
      retries: 10
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9204 | grep -q 'missing authentication credentials'",
        ]



  kibana1:
    container_name: kibana1
    depends_on:
      node1:
        condition: service_healthy
      node2:
        condition: service_healthy
      node3:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: always
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana1data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana1
      - ELASTICSEARCH_HOSTS=https://node1:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - xpack.security.encryptionKey= "1234567890123456789012345678901234567890"
      - xpack.reporting.encryptionKey= 38747239hdjksdkjasdu291834zejhb
      - xpack.encryptedSavedObjects.encryptionKey= "1234567890123456789012345678901234567890"
      - xpack.encryptedSavedObjects.keyRotation.decryptionOnlyKeys= "1234567890123456789012345678901234567890"
      - xpack.security.enabled= true
      - xpack.monitoring.ui.container.elasticsearch.enabled= true
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-net


  kibana2:
    container_name: kibana2
    depends_on:
      node5:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: always
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana2data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT2}:5601
    environment:
      - SERVERNAME=kibana2
      # - server.port=5602
      - ELASTICSEARCH_HOSTS=https://node5:9204
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - xpack.monitoring.ui.container.elasticsearch.enabled= true
      - xpack.security.encryptionKey= "1234567890123456789012345678901234567890"
      - xpack.reporting.encryptionKey= 38747239hdjksdkjasdu291834zejhb
      - xpack.encryptedSavedObjects.encryptionKey= "1234567890123456789012345678901234567890"
      - xpack.encryptedSavedObjects.keyRotation.decryptionOnlyKeys= "1234567890123456789012345678901234567890"
      - xpack.security.enabled= true
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5602 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - es-net

  metricbeat:
    container_name: metricbeat01
    depends_on:
      kibana1:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    restart: always
    # https://github.com/docker/swarmkit/issues/1951
    user: root
    networks:
      - es-net
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - certs:/usr/share/metricbeat/certs
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ELASTICSEARCH_HOSTS=https://node1:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=es1234

    deploy:
      mode: global

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  esdata04:
    driver: local
  esdata05:
    driver: local
  kibana1data:
    driver: local
  kibana2data:
    driver: local
  metricbeat01:
    driver: local

networks:
  es-net:
    driver: bridge


